{
    "docs": [
        {
            "location": "/", 
            "text": "Add Robots\n\n\nThis project introduces open-source motors (stepper, bldc/brushless-dc or solenoid) that are a total snap to remotely control from a cloud-application. It removes the \"seven layers of crap\" required to create a precision motor-control system, making most physical systems more accessible to coders. You send these motors protocol-buffer-encoded commands using any programming language, and the motors simply do what you tell them to do!\n\n\nThe physical motors are USB Type-C peripherals so that a single, robust cable sends data and power (up to 100W). When you connect one to a smartphone (e.g Android), the motor auto-enumerates as a peripheral and a message-oriented background service starts. You then have the choice of a full-blown local smartphone application, e.g. a vehicle drive application with a PID-based control loop, or you can have a shim layer that sends/receives the motor commands to Google Compute (Firebase). Either way, you get local motor control in a reliable, mobile-friendly technology package. The smartphone's other capabilities can be useful in the creation of many different remote applications. As an embedded system you have secure OS/updates, wireless networking, camera, compass, accelerometer, robust CPU, power/battery/charge management and excellent/free debugging tools. Further, with Google Project Fi, it is possible to pay a low monthly fee for a high-powered Android device that fluidly switches between LTE \n WiFi where the LTE data is only $10/GB pro-rated.\n\n\nWhy Do We Want This?\n\n\nThe goal is to add robotic capabilities to things that we do not today think of as robotic. But to get to this point, we need much better tools that are cheaper, easier-to-use and open. To realize this, we need motor objects that are as simple to use as any UX/GUI object, and tie them to technologies that are natively web-friendly. This will make it much easier for everyone to stitch together machine-learning applications that physically manipulate their environment. For specialized motor control machinery applications that are expensive ($10k-100K), it may be possible to re-invent them for several hundred dollars each.\n\n\nCloud Motors by Design\n\n\nWhen we cloud-enable motors (stepper, BLDC, solenoid) we make it much easier to control them from modern application developer stacks. This project will result in a motor design driven directly by commands sent from a remote application that's cloud-native, but it also has support for a local-loop running in a smartphone.", 
            "title": "Home"
        }, 
        {
            "location": "/#add-robots", 
            "text": "This project introduces open-source motors (stepper, bldc/brushless-dc or solenoid) that are a total snap to remotely control from a cloud-application. It removes the \"seven layers of crap\" required to create a precision motor-control system, making most physical systems more accessible to coders. You send these motors protocol-buffer-encoded commands using any programming language, and the motors simply do what you tell them to do!  The physical motors are USB Type-C peripherals so that a single, robust cable sends data and power (up to 100W). When you connect one to a smartphone (e.g Android), the motor auto-enumerates as a peripheral and a message-oriented background service starts. You then have the choice of a full-blown local smartphone application, e.g. a vehicle drive application with a PID-based control loop, or you can have a shim layer that sends/receives the motor commands to Google Compute (Firebase). Either way, you get local motor control in a reliable, mobile-friendly technology package. The smartphone's other capabilities can be useful in the creation of many different remote applications. As an embedded system you have secure OS/updates, wireless networking, camera, compass, accelerometer, robust CPU, power/battery/charge management and excellent/free debugging tools. Further, with Google Project Fi, it is possible to pay a low monthly fee for a high-powered Android device that fluidly switches between LTE   WiFi where the LTE data is only $10/GB pro-rated.", 
            "title": "Add Robots"
        }, 
        {
            "location": "/#why-do-we-want-this", 
            "text": "The goal is to add robotic capabilities to things that we do not today think of as robotic. But to get to this point, we need much better tools that are cheaper, easier-to-use and open. To realize this, we need motor objects that are as simple to use as any UX/GUI object, and tie them to technologies that are natively web-friendly. This will make it much easier for everyone to stitch together machine-learning applications that physically manipulate their environment. For specialized motor control machinery applications that are expensive ($10k-100K), it may be possible to re-invent them for several hundred dollars each.", 
            "title": "Why Do We Want This?"
        }, 
        {
            "location": "/#cloud-motors-by-design", 
            "text": "When we cloud-enable motors (stepper, BLDC, solenoid) we make it much easier to control them from modern application developer stacks. This project will result in a motor design driven directly by commands sent from a remote application that's cloud-native, but it also has support for a local-loop running in a smartphone.", 
            "title": "Cloud Motors by Design"
        }, 
        {
            "location": "/repos/repos/", 
            "text": "The Project Repos\n\n\naddrobots_proto\n\n\nhttps://github.com/AddRobots/addrobots_proto\n     \n\n\nThe core protocol buffer message definitions. it also includes the top-level project documentation. (For convenience, this project also includes the high-level commands, encoded as protocol buffers, for the reference application.)\n\n\naddrobots_webconsole\n\n\nhttps://github.com/AddRobots/addrobots_webconsole\n\n\nA Firebase + ReactJS webapp that acts as a vehicle control console for the reference application.\n\n\naddrobots_service\n\n\nhttps://github.com/AddRobots/addrobots_vcu\n\n\nAn Android background service that tracks and controls the motors over the USB bus. It provides a simple message-passing API so that any high-level application (that has permission) can control the motors.\n\n\naddrobots_vcu\n\n\nhttps://github.com/AddRobots/addrobots_vcu\n\n\nThe android \"vehicle control unit\" reference application that combines drive logic with a PID loop that uses local sensor data, such as OpenCV, Firebase messaging, addrobots_service, and the local IMU.\n\n\naddrobots_mcu\n\n\nhttps://github.com/AddRobots/addrobots_mcu\n\n\nAn ARM CortexM4 based motor controller firmware that encodes/decodes the USB commands, drives the motor controller ICs, controls the PMIC, and collects/sends any sensor data (rotary encoder, PMIC values, etc).\n\n\naddrobots_pcb\n\n\nhttps://github.com/AddRobots/addrobots_pcb\n\n\nThe PCB designs for the motor control boards that physically attach to the motor.", 
            "title": "Repos"
        }, 
        {
            "location": "/repos/repos/#the-project-repos", 
            "text": "", 
            "title": "The Project Repos"
        }, 
        {
            "location": "/repos/repos/#addrobots_proto", 
            "text": "https://github.com/AddRobots/addrobots_proto        The core protocol buffer message definitions. it also includes the top-level project documentation. (For convenience, this project also includes the high-level commands, encoded as protocol buffers, for the reference application.)", 
            "title": "addrobots_proto"
        }, 
        {
            "location": "/repos/repos/#addrobots_webconsole", 
            "text": "https://github.com/AddRobots/addrobots_webconsole  A Firebase + ReactJS webapp that acts as a vehicle control console for the reference application.", 
            "title": "addrobots_webconsole"
        }, 
        {
            "location": "/repos/repos/#addrobots_service", 
            "text": "https://github.com/AddRobots/addrobots_vcu  An Android background service that tracks and controls the motors over the USB bus. It provides a simple message-passing API so that any high-level application (that has permission) can control the motors.", 
            "title": "addrobots_service"
        }, 
        {
            "location": "/repos/repos/#addrobots_vcu", 
            "text": "https://github.com/AddRobots/addrobots_vcu  The android \"vehicle control unit\" reference application that combines drive logic with a PID loop that uses local sensor data, such as OpenCV, Firebase messaging, addrobots_service, and the local IMU.", 
            "title": "addrobots_vcu"
        }, 
        {
            "location": "/repos/repos/#addrobots_mcu", 
            "text": "https://github.com/AddRobots/addrobots_mcu  An ARM CortexM4 based motor controller firmware that encodes/decodes the USB commands, drives the motor controller ICs, controls the PMIC, and collects/sends any sensor data (rotary encoder, PMIC values, etc).", 
            "title": "addrobots_mcu"
        }, 
        {
            "location": "/repos/repos/#addrobots_pcb", 
            "text": "https://github.com/AddRobots/addrobots_pcb  The PCB designs for the motor control boards that physically attach to the motor.", 
            "title": "addrobots_pcb"
        }, 
        {
            "location": "/about/contribute/", 
            "text": "Contribute\n\n\nAddRobots docs use \nmkdocs\n and committed it all to github. This setup not only generates nice-looking, searchable documentation, it makes it possible to share/fork it so that AddRobots can be a community effort.\n\n\nThe mkdocs system is a self-contained, Python-based documentation tool that uses Twitter Bootstrap and scripting to generate high-quality HTML-based documentation using simple markdown files. The cool thing about mkdocs is that the repo is both the documentation set and place to generate the static, production site. The top-level mkdocs.yml file shows the documentation tree structure and configurations. If you edit this file, it will be pretty easy to see what markdown (*.md) files you need to edit in order to change the docs you want changed.\n\n\nInstalling Python and mkdocs.\n\n\nPlease see the mkdocs website to see how to install Python and the mkdocs tools. It's pretty simple and easy to do this, but it's out-of-scope to explain that here.\n\n\nEditing the docs\n\n\nFrom a terminal session change to the top-level directory\n\n\n    \ncd ~/git/addrobots_docs\n    \nmkdocs serve\n\n\n\n\nNow from your browser go to the URL: \nhttp://127.0.0.1:8000\n\n\nAs you edit the markdown files, mkdocs automatically updates the website in realtime so that you can review your changes.\n\n\nGenerating the Static Documentation Website\n\n\nOnce you've completed all of your edits, you need to generate the static site (not committed to git because \"./site\" is in .gitignore).\n\n\n    \ncd ~/git/addrobots_docs\n    \nmkdocs build\n\n\n\n\nThis will generate a static documentation site in the directory ~/git/addrobots_docs/site. You can validate the site by killing the \"mkdocs serve\" process and starting a simple Python=-based web server in that directory:\n\n\n    \ncd ~/git/addrobots_docs/site\n    \npython -m SimpleHTTPServer 8000\n\n\n\n\nNow from your browser go to the URL: \nhttp://127.0.0.1:8000\n\n\nCommit the Static Site to Github Project Pages (\"gh-pages\")\n\n\n    \ncd ~/git/addrobots_docs\n    \nmkdocs gh-deploy --clean\n\n\n\n\nThis command will generate the static site and push it to the gh-pages branch so that it shows up as a searchable, shred website (on github). The url will be \nhttps://your_github_id.github.io/addrobots_docs/\n.", 
            "title": "Contribute"
        }, 
        {
            "location": "/about/contribute/#contribute", 
            "text": "AddRobots docs use  mkdocs  and committed it all to github. This setup not only generates nice-looking, searchable documentation, it makes it possible to share/fork it so that AddRobots can be a community effort.  The mkdocs system is a self-contained, Python-based documentation tool that uses Twitter Bootstrap and scripting to generate high-quality HTML-based documentation using simple markdown files. The cool thing about mkdocs is that the repo is both the documentation set and place to generate the static, production site. The top-level mkdocs.yml file shows the documentation tree structure and configurations. If you edit this file, it will be pretty easy to see what markdown (*.md) files you need to edit in order to change the docs you want changed.", 
            "title": "Contribute"
        }, 
        {
            "location": "/about/contribute/#installing-python-and-mkdocs", 
            "text": "Please see the mkdocs website to see how to install Python and the mkdocs tools. It's pretty simple and easy to do this, but it's out-of-scope to explain that here.", 
            "title": "Installing Python and mkdocs."
        }, 
        {
            "location": "/about/contribute/#editing-the-docs", 
            "text": "From a terminal session change to the top-level directory       cd ~/git/addrobots_docs\n     mkdocs serve  Now from your browser go to the URL:  http://127.0.0.1:8000  As you edit the markdown files, mkdocs automatically updates the website in realtime so that you can review your changes.", 
            "title": "Editing the docs"
        }, 
        {
            "location": "/about/contribute/#generating-the-static-documentation-website", 
            "text": "Once you've completed all of your edits, you need to generate the static site (not committed to git because \"./site\" is in .gitignore).       cd ~/git/addrobots_docs\n     mkdocs build  This will generate a static documentation site in the directory ~/git/addrobots_docs/site. You can validate the site by killing the \"mkdocs serve\" process and starting a simple Python=-based web server in that directory:       cd ~/git/addrobots_docs/site\n     python -m SimpleHTTPServer 8000  Now from your browser go to the URL:  http://127.0.0.1:8000", 
            "title": "Generating the Static Documentation Website"
        }, 
        {
            "location": "/about/contribute/#commit-the-static-site-to-github-project-pages-gh-pages", 
            "text": "cd ~/git/addrobots_docs\n     mkdocs gh-deploy --clean  This command will generate the static site and push it to the gh-pages branch so that it shows up as a searchable, shred website (on github). The url will be  https://your_github_id.github.io/addrobots_docs/ .", 
            "title": "Commit the Static Site to Github Project Pages (\"gh-pages\")"
        }, 
        {
            "location": "/about/license/", 
            "text": "BSD License\n\n\nCopyright (c) 2016, Jeff Williams\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the \n nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL \n BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#bsd-license", 
            "text": "Copyright (c) 2016, Jeff Williams\nAll rights reserved.  Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the   nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL   BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "BSD License"
        }, 
        {
            "location": "/about/zerodiff/", 
            "text": "We follow the ZeroDiff process to develop the AddRobots. You can read more about it \nhere", 
            "title": "ZeroDiff"
        }, 
        {
            "location": "/messages/motor/", 
            "text": "Motor Messages\n\n\nThe system uses Google protocol buffers to encode all messages sent/received by the various subsystems. The top-level motor message contains two fields, a UUID to address the message to a particular motor followed by a union field that contains either a MotorCmd or MotorData. The MotorMsg.proto file contains the following definition for the top-level motor message:\n\n\nmessage MotorMsg {\n    string uuid = 1;\n    oneof content {\n        MotorData motorData = 2;\n        MotorCmd motorCmd = 3;\n    }\n}\n\n\n\n\nUUID\n\n\nThe motor's universally unique ID as a string. Identifying the motors by UUID means we do not need a central authority to mint new motors that are uniquely addressable.  Any of the UUID encoding formats are fine as long as the stored value is the canonical string representation of 32 base16 digits in the form \n8-4-4-4-12\n for a total of 36 characters.", 
            "title": "General"
        }, 
        {
            "location": "/messages/motor/#motor-messages", 
            "text": "The system uses Google protocol buffers to encode all messages sent/received by the various subsystems. The top-level motor message contains two fields, a UUID to address the message to a particular motor followed by a union field that contains either a MotorCmd or MotorData. The MotorMsg.proto file contains the following definition for the top-level motor message:  message MotorMsg {\n    string uuid = 1;\n    oneof content {\n        MotorData motorData = 2;\n        MotorCmd motorCmd = 3;\n    }\n}", 
            "title": "Motor Messages"
        }, 
        {
            "location": "/messages/motor/#uuid", 
            "text": "The motor's universally unique ID as a string. Identifying the motors by UUID means we do not need a central authority to mint new motors that are uniquely addressable.  Any of the UUID encoding formats are fine as long as the stored value is the canonical string representation of 32 base16 digits in the form  8-4-4-4-12  for a total of 36 characters.", 
            "title": "UUID"
        }, 
        {
            "location": "/messages/commands/motorcmd/", 
            "text": "MotorCmd\n\n\nA motor command message is a single action followed by one or more command parameters, each encoded as a tuple: (param id, value, unit).\n\n\n    message MotorCmd {\n        MotorAction action = 1;\n        repeated CmdParam paramList = 2;\n    }\n\n\n\n\nMotorAction\n\n\nBRAKE\n\n\nStop the motor immediately where it is and apply holding torque.\n\n\nFREEWHEEL\n\n\nRelease all of the windings so that the motor spinds freely.\n\n\nRUN\n\n\nRun the motor continuously.\n\n\nGOTO_POS\n\n\nGo to requested position, stop and apply holding torque.\n\n\nCmdParam:\n\n\nThe motor command parameters are sent as a list of tuples: (ID, value, unit). The ID and unit come from an enumerated set and the value is string-encoded. The following is a list of command parameter IDs - we include the unit for clarity. The default value and unit are in paranthesis.\n\n\nCLOCKWISE\n\n\nThe motor movement direction (true, BOOLEAN)\n\n\nPOSITION\n\n\nThe motor stop position (0.0, DEGREE)\n\n\nVELOCITY\n\n\nThe motor velocity once fully accelerated (360.0, DEGREE/SEC)\n\n\nACCEL\n\n\nThe motor acceleration from the current velocity toward the target velocity (15 DEGREE/SEC^2)\n\n\nHOLD_TORQUE\n\n\nThe amount of torque to apply in an attempt to hold the requested position for the commands GOTO_POS or BRAKE. (2.0, Newton)\n\n\nBREAKAWAY\n\n\nIf the motor fails to hold a position, maintain a velocity or accelerate for this much time, it will freewheel. When set to 0 there is no breakaway behavior (0, SEC)\n\n\n\n\nWarning\n\n\nNB: THIS IN NO WAY ASSURES A HUMAN-SAFE OPERATION - ALL HUMAN SAFETY SYSTEMS MUST BE EXTERNAL TO MOTOR CONTROL.\n\n\n\n\nMIN_CURRENT_LIMIT\n\n\nThe minimum current the motor should try to maintain for the active operation. During the active operation, the controller will continuously detect the minimum current required to successfully complete the operation, but it will never go below the MIN_CURRENT_LIMIT. (0.0, AMP)\n\n\nMAX_CURRENT_LIMIT\n\n\nThe maximum current the motor is allowed to draw for the active operation. During the active operation, the controller will continuously detect the minimum current required to successfully complete the operation, but it will never go above the MAX_CURRENT_LIMIT. When coupled with BREAKAWAY, this is a good way to create a safe-operation envelope. (0.5 AMP)\n\n\n\n\nWarning\n\n\nNB: THIS IN NO WAY ASSURES A HUMAN-SAFE OPERATION - ALL HUMAN SAFETY SYSTEMS MUST BE EXTERNAL TO MOTOR CONTROL.\n\n\n\n\nMIN_VOLT_VELOCITY\n\n\nApply the MIN_VOLT_LIMIT when the velocity is at or below this value. The controller uses a voltage slope from MIN_VOLT_LIMIT to MAX_VOLT_LIMIT when velocity is between MIN_VOLT_VELOCITY and MAX_VOLT_VELOCITY (180, DEGREE/SEC)\n\n\nMAX_VOLT_VELOCITY\n\n\nApply the MAX_VOLT_LIMIT when the velocity is at or above this value. The controller uses a voltage slope from MIN_VOLT_LIMIT to MAX_VOLT_LIMIT when velocity is between MIN_VOLT_VELOCITY and MAX_VOLT_VELOCITY (360, DEGREE/SEC)\n\n\nMIN_VOLT_LIMIT\n\n\nThe voltage to apply when the velocity is at or below MIN_VOLT_VELOCITY. (3, VOLT)\n\n\nMAX_VOLT_LIMIT\n\n\nThe voltage to apply when the velocity is at or above MAX_VOLT_VELOCITY. (24, VOLT)\n\n\nUnits\n\n\nSTRING\n\n\nINTEGER\n\n\nDOUBLE\n\n\nSECOND\n\n\nDEGREE\n\n\nAMP\n\n\nVOLT\n\n\nNEWTONS\n\n\nUHENRY\n\n\nSample Commands\n\n\nAn simple motor positioning command might be:\n\n\nGOTO_POS\n(POSITION, 180.5, DEGREES)\n(DIRECTION, TRUE, CLOCKWISE)\n\n\n\n\nThis would command the motor to turn clockwise until it reached 180.5deg, and it would hold that position with the default torque.\n\n\nIf you need more control of the motor's behavior during that GOTO_POS command, you can add more parameters:\n\n\nGOTO_POS\n(POSITION, 180.5, DEGREES)\n(DIRECTION, TRUE, CLOCKWISE)\n(ACCEL, 0.5, DEGREE/SEC)\n(MIN_CURRENT_LIMIT, 0.2, AMP)\n(MAX_CURRENT_LIMIT, 2, AMP)\n\n\n\n\nThis would command the motor to turn clockwise, accelerating at 0.5deg/sec with a minimum current of 0.2 amps and a maximum current of 2 amps until the motor reached 180.75 deg and then hold that position by seeking the minimum required current needed to hold the position without going below or above the current limits.\n\n\nThe point is that you can use the motors simply, or with more control - both work.", 
            "title": "MotorCmd"
        }, 
        {
            "location": "/messages/commands/motorcmd/#motorcmd", 
            "text": "A motor command message is a single action followed by one or more command parameters, each encoded as a tuple: (param id, value, unit).      message MotorCmd {\n        MotorAction action = 1;\n        repeated CmdParam paramList = 2;\n    }", 
            "title": "MotorCmd"
        }, 
        {
            "location": "/messages/commands/motorcmd/#motoraction", 
            "text": "", 
            "title": "MotorAction"
        }, 
        {
            "location": "/messages/commands/motorcmd/#brake", 
            "text": "Stop the motor immediately where it is and apply holding torque.", 
            "title": "BRAKE"
        }, 
        {
            "location": "/messages/commands/motorcmd/#freewheel", 
            "text": "Release all of the windings so that the motor spinds freely.", 
            "title": "FREEWHEEL"
        }, 
        {
            "location": "/messages/commands/motorcmd/#run", 
            "text": "Run the motor continuously.", 
            "title": "RUN"
        }, 
        {
            "location": "/messages/commands/motorcmd/#goto_pos", 
            "text": "Go to requested position, stop and apply holding torque.", 
            "title": "GOTO_POS"
        }, 
        {
            "location": "/messages/commands/motorcmd/#cmdparam", 
            "text": "The motor command parameters are sent as a list of tuples: (ID, value, unit). The ID and unit come from an enumerated set and the value is string-encoded. The following is a list of command parameter IDs - we include the unit for clarity. The default value and unit are in paranthesis.", 
            "title": "CmdParam:"
        }, 
        {
            "location": "/messages/commands/motorcmd/#clockwise", 
            "text": "The motor movement direction (true, BOOLEAN)", 
            "title": "CLOCKWISE"
        }, 
        {
            "location": "/messages/commands/motorcmd/#position", 
            "text": "The motor stop position (0.0, DEGREE)", 
            "title": "POSITION"
        }, 
        {
            "location": "/messages/commands/motorcmd/#velocity", 
            "text": "The motor velocity once fully accelerated (360.0, DEGREE/SEC)", 
            "title": "VELOCITY"
        }, 
        {
            "location": "/messages/commands/motorcmd/#accel", 
            "text": "The motor acceleration from the current velocity toward the target velocity (15 DEGREE/SEC^2)", 
            "title": "ACCEL"
        }, 
        {
            "location": "/messages/commands/motorcmd/#hold_torque", 
            "text": "The amount of torque to apply in an attempt to hold the requested position for the commands GOTO_POS or BRAKE. (2.0, Newton)", 
            "title": "HOLD_TORQUE"
        }, 
        {
            "location": "/messages/commands/motorcmd/#breakaway", 
            "text": "If the motor fails to hold a position, maintain a velocity or accelerate for this much time, it will freewheel. When set to 0 there is no breakaway behavior (0, SEC)   Warning  NB: THIS IN NO WAY ASSURES A HUMAN-SAFE OPERATION - ALL HUMAN SAFETY SYSTEMS MUST BE EXTERNAL TO MOTOR CONTROL.", 
            "title": "BREAKAWAY"
        }, 
        {
            "location": "/messages/commands/motorcmd/#min_current_limit", 
            "text": "The minimum current the motor should try to maintain for the active operation. During the active operation, the controller will continuously detect the minimum current required to successfully complete the operation, but it will never go below the MIN_CURRENT_LIMIT. (0.0, AMP)", 
            "title": "MIN_CURRENT_LIMIT"
        }, 
        {
            "location": "/messages/commands/motorcmd/#max_current_limit", 
            "text": "The maximum current the motor is allowed to draw for the active operation. During the active operation, the controller will continuously detect the minimum current required to successfully complete the operation, but it will never go above the MAX_CURRENT_LIMIT. When coupled with BREAKAWAY, this is a good way to create a safe-operation envelope. (0.5 AMP)   Warning  NB: THIS IN NO WAY ASSURES A HUMAN-SAFE OPERATION - ALL HUMAN SAFETY SYSTEMS MUST BE EXTERNAL TO MOTOR CONTROL.", 
            "title": "MAX_CURRENT_LIMIT"
        }, 
        {
            "location": "/messages/commands/motorcmd/#min_volt_velocity", 
            "text": "Apply the MIN_VOLT_LIMIT when the velocity is at or below this value. The controller uses a voltage slope from MIN_VOLT_LIMIT to MAX_VOLT_LIMIT when velocity is between MIN_VOLT_VELOCITY and MAX_VOLT_VELOCITY (180, DEGREE/SEC)", 
            "title": "MIN_VOLT_VELOCITY"
        }, 
        {
            "location": "/messages/commands/motorcmd/#max_volt_velocity", 
            "text": "Apply the MAX_VOLT_LIMIT when the velocity is at or above this value. The controller uses a voltage slope from MIN_VOLT_LIMIT to MAX_VOLT_LIMIT when velocity is between MIN_VOLT_VELOCITY and MAX_VOLT_VELOCITY (360, DEGREE/SEC)", 
            "title": "MAX_VOLT_VELOCITY"
        }, 
        {
            "location": "/messages/commands/motorcmd/#min_volt_limit", 
            "text": "The voltage to apply when the velocity is at or below MIN_VOLT_VELOCITY. (3, VOLT)", 
            "title": "MIN_VOLT_LIMIT"
        }, 
        {
            "location": "/messages/commands/motorcmd/#max_volt_limit", 
            "text": "The voltage to apply when the velocity is at or above MAX_VOLT_VELOCITY. (24, VOLT)", 
            "title": "MAX_VOLT_LIMIT"
        }, 
        {
            "location": "/messages/commands/motorcmd/#units", 
            "text": "", 
            "title": "Units"
        }, 
        {
            "location": "/messages/commands/motorcmd/#string", 
            "text": "", 
            "title": "STRING"
        }, 
        {
            "location": "/messages/commands/motorcmd/#integer", 
            "text": "", 
            "title": "INTEGER"
        }, 
        {
            "location": "/messages/commands/motorcmd/#double", 
            "text": "", 
            "title": "DOUBLE"
        }, 
        {
            "location": "/messages/commands/motorcmd/#second", 
            "text": "", 
            "title": "SECOND"
        }, 
        {
            "location": "/messages/commands/motorcmd/#degree", 
            "text": "", 
            "title": "DEGREE"
        }, 
        {
            "location": "/messages/commands/motorcmd/#amp", 
            "text": "", 
            "title": "AMP"
        }, 
        {
            "location": "/messages/commands/motorcmd/#volt", 
            "text": "", 
            "title": "VOLT"
        }, 
        {
            "location": "/messages/commands/motorcmd/#newtons", 
            "text": "", 
            "title": "NEWTONS"
        }, 
        {
            "location": "/messages/commands/motorcmd/#uhenry", 
            "text": "", 
            "title": "UHENRY"
        }, 
        {
            "location": "/messages/commands/motorcmd/#sample-commands", 
            "text": "An simple motor positioning command might be:  GOTO_POS\n(POSITION, 180.5, DEGREES)\n(DIRECTION, TRUE, CLOCKWISE)  This would command the motor to turn clockwise until it reached 180.5deg, and it would hold that position with the default torque.  If you need more control of the motor's behavior during that GOTO_POS command, you can add more parameters:  GOTO_POS\n(POSITION, 180.5, DEGREES)\n(DIRECTION, TRUE, CLOCKWISE)\n(ACCEL, 0.5, DEGREE/SEC)\n(MIN_CURRENT_LIMIT, 0.2, AMP)\n(MAX_CURRENT_LIMIT, 2, AMP)  This would command the motor to turn clockwise, accelerating at 0.5deg/sec with a minimum current of 0.2 amps and a maximum current of 2 amps until the motor reached 180.75 deg and then hold that position by seeking the minimum required current needed to hold the position without going below or above the current limits.  The point is that you can use the motors simply, or with more control - both work.", 
            "title": "Sample Commands"
        }, 
        {
            "location": "/messages/data/motordata/", 
            "text": "MotorData\n\n\nA motor data message is a single action followed by one or more command parameters, each encoded as a tuple: (param id, value, unit).\n\n\n    message MotorData {\n        DataAction action = 1;\n        repeated DataParam paramList = 2;\n    }\n\n\n\n\nDataAction\n\n\nGET\n\n\nThe MotorData message that requests the motor send to send back a MotorData message that contains values for each requested parameter.\n\n\nRESULT\n\n\nThe MotorData message that contains one or more motor data values.\n\n\nDataParam\n\n\nVERSION\n\n\nMotor version number. The manufacturer controls this value, and it has no meaning with motor control. (The system uses protocol buffers in a backward compatibly way, so versioning should not be necessary.)\n\n\nMFG_DATE\n\n\nThe manufacturing date encoded as YYYYMMDD. The manufacturer controls this value, and it has no meaning with motor control. \n\n\nMFG_ID\n\n\nThe manufacturer's ID. The manufacturer controls this value, and it has no meaning with motor control. \n\n\nMODEL_ID\n\n\nThe motor's model ID. The manufacturer controls this value, and it has no meaning with motor control. \n\n\nINDUCTANCE\n\n\nThe motor's inductance in Henries. This allows the control program to estimate total torque under different voltages and currents.\n\n\nPOSITION\n\n\nThe motor's current position in degrees.\n\n\nCURRENT\n\n\nThe instantaneously measured current supplied to the motor windings.\n\n\nVOLTAGE\n\n\nThe instantaneously measured voltage supplied to the motor windings.", 
            "title": "MotorData"
        }, 
        {
            "location": "/messages/data/motordata/#motordata", 
            "text": "A motor data message is a single action followed by one or more command parameters, each encoded as a tuple: (param id, value, unit).      message MotorData {\n        DataAction action = 1;\n        repeated DataParam paramList = 2;\n    }", 
            "title": "MotorData"
        }, 
        {
            "location": "/messages/data/motordata/#dataaction", 
            "text": "", 
            "title": "DataAction"
        }, 
        {
            "location": "/messages/data/motordata/#get", 
            "text": "The MotorData message that requests the motor send to send back a MotorData message that contains values for each requested parameter.", 
            "title": "GET"
        }, 
        {
            "location": "/messages/data/motordata/#result", 
            "text": "The MotorData message that contains one or more motor data values.", 
            "title": "RESULT"
        }, 
        {
            "location": "/messages/data/motordata/#dataparam", 
            "text": "", 
            "title": "DataParam"
        }, 
        {
            "location": "/messages/data/motordata/#version", 
            "text": "Motor version number. The manufacturer controls this value, and it has no meaning with motor control. (The system uses protocol buffers in a backward compatibly way, so versioning should not be necessary.)", 
            "title": "VERSION"
        }, 
        {
            "location": "/messages/data/motordata/#mfg_date", 
            "text": "The manufacturing date encoded as YYYYMMDD. The manufacturer controls this value, and it has no meaning with motor control.", 
            "title": "MFG_DATE"
        }, 
        {
            "location": "/messages/data/motordata/#mfg_id", 
            "text": "The manufacturer's ID. The manufacturer controls this value, and it has no meaning with motor control.", 
            "title": "MFG_ID"
        }, 
        {
            "location": "/messages/data/motordata/#model_id", 
            "text": "The motor's model ID. The manufacturer controls this value, and it has no meaning with motor control.", 
            "title": "MODEL_ID"
        }, 
        {
            "location": "/messages/data/motordata/#inductance", 
            "text": "The motor's inductance in Henries. This allows the control program to estimate total torque under different voltages and currents.", 
            "title": "INDUCTANCE"
        }, 
        {
            "location": "/messages/data/motordata/#position", 
            "text": "The motor's current position in degrees.", 
            "title": "POSITION"
        }, 
        {
            "location": "/messages/data/motordata/#current", 
            "text": "The instantaneously measured current supplied to the motor windings.", 
            "title": "CURRENT"
        }, 
        {
            "location": "/messages/data/motordata/#voltage", 
            "text": "The instantaneously measured voltage supplied to the motor windings.", 
            "title": "VOLTAGE"
        }, 
        {
            "location": "/messages/application/cartcmds/", 
            "text": "High-Level Vehicle Drive Commands", 
            "title": "Robotic Cart"
        }, 
        {
            "location": "/messages/application/cartcmds/#high-level-vehicle-drive-commands", 
            "text": "", 
            "title": "High-Level Vehicle Drive Commands"
        }, 
        {
            "location": "/messages/processing/", 
            "text": "Message Processing\n\n\nThe addrobots_proto repo contains the protocol buffer message definitions. We process the raw proto files into code using the \nprotoc\n command.\n\n\nProtoc\n\n\nThe protoc command comes from the Google github repo: \nhttps://github.com/google/protobuf\n. How you build and install protoc is dependent on you. The commands below are correct for protoc v3.3.1.\n\n\nJava/Kotlin message generation\n\n\n cd ~/git/addrobots_proto/\n\n\n protoc --proto_path=./SourceMessages/ --java_out=./Production/Java/ ./SourceMessages/VehicleMsg.proto\n\n\n protoc --proto_path=./SourceMessages/ --java_out=./Production/Java/ ./SourceMessages/MotorMsg.proto\n\n\n\n\nJavascript message generation\n\n\n cd ~/git/addrobots_proto/\n\n\n protoc --proto_path=./SourceMessages/ --js_out=binary:./Production/Javascript/ ./SourceMessages/VehicleMsg.proto\n\n\n protoc --proto_path=./SourceMessages/ --js_out=binary:./Production/Javascript/ ./SourceMessages/MotorMsg.proto\n\n\n\n\nPython message generation\n\n\n cd ~/git/addrobots_proto/\n\n\n protoc --proto_path=./SourceMessages/ --python_out=./Production/Python/ ./SourceMessages/VehicleMsg.proto\n\n\n protoc --proto_path=./SourceMessages/ --python_out=./Production/Python/ ./SourceMessages/MotorMsg.proto\n\n\n\n\nNanoPB (C code for firmware)\n\n\nNanoPB Project\n\n\nIn order to run the below commands, we need to use the NanoPB project: \nhttps://github.com/nanopb/nanopb\n. Once you check out this repo, execute the following commands to generate the distribution version:\n\n\n cd ~/git/nanopb\n\n\n ./tools/make_XXX_package.sh (where XXX is [linux, mac or windows])\n\n\n\n\nThis will create a release directory in the NanoPB project's \ndist\n folder. Use the path to the created sub-folder in the commands below.\n\n\nCode Generation\n\n\n cd ~/git/addrobots_proto/Production\n\n\n protoc --plugin=nanopb=~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/protoc-gen-nanopb --include_imports=~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/proto/nanopb.proto --proto_path=../SourceMessages -o./MotorMsg.pb ../SourceMessages/MotorMsg.proto\n\n\n python ~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/nanopb_generator.py -f ../SourceMessages/MotorMsg.options --output-dir=../Production/NanoPB MotorMsg.pb\n\n\n\n\n\n\nNanoPB Dist Folder Version\n\n\nThe reason for using the version in the dist folder is because we generated them using protoc v3.3.2 (locally) to support the \nproto3\n keyword in nanopb. At the moment (25JUL17) the NanoPB project does not support the \nproto3\n keyword in the default release code.", 
            "title": "Code Generation"
        }, 
        {
            "location": "/messages/processing/#message-processing", 
            "text": "The addrobots_proto repo contains the protocol buffer message definitions. We process the raw proto files into code using the  protoc  command.", 
            "title": "Message Processing"
        }, 
        {
            "location": "/messages/processing/#protoc", 
            "text": "The protoc command comes from the Google github repo:  https://github.com/google/protobuf . How you build and install protoc is dependent on you. The commands below are correct for protoc v3.3.1.", 
            "title": "Protoc"
        }, 
        {
            "location": "/messages/processing/#javakotlin-message-generation", 
            "text": "cd ~/git/addrobots_proto/  protoc --proto_path=./SourceMessages/ --java_out=./Production/Java/ ./SourceMessages/VehicleMsg.proto  protoc --proto_path=./SourceMessages/ --java_out=./Production/Java/ ./SourceMessages/MotorMsg.proto", 
            "title": "Java/Kotlin message generation"
        }, 
        {
            "location": "/messages/processing/#javascript-message-generation", 
            "text": "cd ~/git/addrobots_proto/  protoc --proto_path=./SourceMessages/ --js_out=binary:./Production/Javascript/ ./SourceMessages/VehicleMsg.proto  protoc --proto_path=./SourceMessages/ --js_out=binary:./Production/Javascript/ ./SourceMessages/MotorMsg.proto", 
            "title": "Javascript message generation"
        }, 
        {
            "location": "/messages/processing/#python-message-generation", 
            "text": "cd ~/git/addrobots_proto/  protoc --proto_path=./SourceMessages/ --python_out=./Production/Python/ ./SourceMessages/VehicleMsg.proto  protoc --proto_path=./SourceMessages/ --python_out=./Production/Python/ ./SourceMessages/MotorMsg.proto", 
            "title": "Python message generation"
        }, 
        {
            "location": "/messages/processing/#nanopb-c-code-for-firmware", 
            "text": "", 
            "title": "NanoPB (C code for firmware)"
        }, 
        {
            "location": "/messages/processing/#nanopb-project", 
            "text": "In order to run the below commands, we need to use the NanoPB project:  https://github.com/nanopb/nanopb . Once you check out this repo, execute the following commands to generate the distribution version:   cd ~/git/nanopb  ./tools/make_XXX_package.sh (where XXX is [linux, mac or windows])  This will create a release directory in the NanoPB project's  dist  folder. Use the path to the created sub-folder in the commands below.", 
            "title": "NanoPB Project"
        }, 
        {
            "location": "/messages/processing/#code-generation", 
            "text": "cd ~/git/addrobots_proto/Production  protoc --plugin=nanopb=~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/protoc-gen-nanopb --include_imports=~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/proto/nanopb.proto --proto_path=../SourceMessages -o./MotorMsg.pb ../SourceMessages/MotorMsg.proto  python ~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/nanopb_generator.py -f ../SourceMessages/MotorMsg.options --output-dir=../Production/NanoPB MotorMsg.pb   NanoPB Dist Folder Version  The reason for using the version in the dist folder is because we generated them using protoc v3.3.2 (locally) to support the  proto3  keyword in nanopb. At the moment (25JUL17) the NanoPB project does not support the  proto3  keyword in the default release code.", 
            "title": "Code Generation"
        }, 
        {
            "location": "/applications/shim/", 
            "text": "Shim Application\n\n\nThe shim application simply passes motor commands to/from Google Compute (Firebase) to the local motor with no local processing at all. These kinds of applications will not be able to take advantage of the local smartphone capabilities (cameras, IMU, GPS, touch-screen UX, etc), but for many simple control applications this may be perfectly suitable. A silly example is a Internet-controlled cat feeder.", 
            "title": "Shim Application"
        }, 
        {
            "location": "/applications/shim/#shim-application", 
            "text": "The shim application simply passes motor commands to/from Google Compute (Firebase) to the local motor with no local processing at all. These kinds of applications will not be able to take advantage of the local smartphone capabilities (cameras, IMU, GPS, touch-screen UX, etc), but for many simple control applications this may be perfectly suitable. A silly example is a Internet-controlled cat feeder.", 
            "title": "Shim Application"
        }, 
        {
            "location": "/applications/cart/", 
            "text": "Robotic Cart Reference Application\n\n\nThe project comes with a reference application that converts a wire cart or z-rack into autonomous, remote-drive vehicle. The cloud application encodes high-level, application-specific commands (e.g. \"drive\", \"stop\", \"orbit\", etc.) into protobuf messages that it sends to an Android application. The Android application is a fairly typical high-level vehicle control system with a PID loop fed by phone's sensor array: camera/optical-flow, compass heading, acceleration/tilt and so on. The PID control code converts these high-level application commands into low-level motor commands that it sends to a central background service that gets them onto the USB bus. This Android application only as as a fun project to get you familiar with how the stack works.", 
            "title": "Robotic Cart"
        }, 
        {
            "location": "/applications/cart/#robotic-cart-reference-application", 
            "text": "The project comes with a reference application that converts a wire cart or z-rack into autonomous, remote-drive vehicle. The cloud application encodes high-level, application-specific commands (e.g. \"drive\", \"stop\", \"orbit\", etc.) into protobuf messages that it sends to an Android application. The Android application is a fairly typical high-level vehicle control system with a PID loop fed by phone's sensor array: camera/optical-flow, compass heading, acceleration/tilt and so on. The PID control code converts these high-level application commands into low-level motor commands that it sends to a central background service that gets them onto the USB bus. This Android application only as as a fun project to get you familiar with how the stack works.", 
            "title": "Robotic Cart Reference Application"
        }
    ]
}
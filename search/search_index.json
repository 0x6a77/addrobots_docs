{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Add Robots \u00b6 This project introduces open-source motors (stepper, bldc/brushless-dc or solenoid) that are a total snap to remotely control from a cloud-application. It removes the \"seven layers of crap\" required to create a precision motor-control system, making most physical systems more accessible to coders. You send these motors protocol-buffer-encoded commands using any programming language, and the motors simply do what you tell them to do! The physical motors are USB Type-C peripherals so that a single, robust cable sends data and power (up to 100W). When you connect one to a smartphone (e.g Android), the motor auto-enumerates as a peripheral and a message-oriented background service starts. You then have the choice of a full-blown local smartphone application, e.g. a vehicle drive application with a PID-based control loop, or you can have a shim layer that sends/receives the motor commands to Google Compute (Firebase). Either way, you get local motor control in a reliable, mobile-friendly technology package. The smartphone's other capabilities can be useful in the creation of many different remote applications. As an embedded system you have secure OS/updates, wireless networking, camera, compass, accelerometer, robust CPU, power/battery/charge management and excellent/free debugging tools. Further, with Google Project Fi, it is possible to pay a low monthly fee for a high-powered Android device that fluidly switches between LTE & WiFi where the LTE data is only $10/GB pro-rated. Why Do We Want This? \u00b6 The goal is to add robotic capabilities to things that we do not today think of as robotic. But to get to this point, we need much better tools that are cheaper, easier-to-use and open. To realize this, we need motor objects that are as simple to use as any UX/GUI object, and tie them to technologies that are natively web-friendly. This will make it much easier for everyone to stitch together machine-learning applications that physically manipulate their environment. For specialized motor control machinery applications that are expensive ($10k-100K), it may be possible to re-invent them for several hundred dollars each. Cloud Motors by Design \u00b6 When we cloud-enable motors (stepper, BLDC, solenoid) we make it much easier to control them from modern application developer stacks. This project will result in a motor design driven directly by commands sent from a remote application that's cloud-native, but it also has support for a local-loop running in a smartphone.","title":"Home"},{"location":"#add-robots","text":"This project introduces open-source motors (stepper, bldc/brushless-dc or solenoid) that are a total snap to remotely control from a cloud-application. It removes the \"seven layers of crap\" required to create a precision motor-control system, making most physical systems more accessible to coders. You send these motors protocol-buffer-encoded commands using any programming language, and the motors simply do what you tell them to do! The physical motors are USB Type-C peripherals so that a single, robust cable sends data and power (up to 100W). When you connect one to a smartphone (e.g Android), the motor auto-enumerates as a peripheral and a message-oriented background service starts. You then have the choice of a full-blown local smartphone application, e.g. a vehicle drive application with a PID-based control loop, or you can have a shim layer that sends/receives the motor commands to Google Compute (Firebase). Either way, you get local motor control in a reliable, mobile-friendly technology package. The smartphone's other capabilities can be useful in the creation of many different remote applications. As an embedded system you have secure OS/updates, wireless networking, camera, compass, accelerometer, robust CPU, power/battery/charge management and excellent/free debugging tools. Further, with Google Project Fi, it is possible to pay a low monthly fee for a high-powered Android device that fluidly switches between LTE & WiFi where the LTE data is only $10/GB pro-rated.","title":"Add Robots"},{"location":"#why-do-we-want-this","text":"The goal is to add robotic capabilities to things that we do not today think of as robotic. But to get to this point, we need much better tools that are cheaper, easier-to-use and open. To realize this, we need motor objects that are as simple to use as any UX/GUI object, and tie them to technologies that are natively web-friendly. This will make it much easier for everyone to stitch together machine-learning applications that physically manipulate their environment. For specialized motor control machinery applications that are expensive ($10k-100K), it may be possible to re-invent them for several hundred dollars each.","title":"Why Do We Want This?"},{"location":"#cloud-motors-by-design","text":"When we cloud-enable motors (stepper, BLDC, solenoid) we make it much easier to control them from modern application developer stacks. This project will result in a motor design driven directly by commands sent from a remote application that's cloud-native, but it also has support for a local-loop running in a smartphone.","title":"Cloud Motors by Design"},{"location":"about/contribute/","text":"Contribute \u00b6 AddRobots docs use mkdocs and committed it all to github. This setup not only generates nice-looking, searchable documentation, it makes it possible to share/fork it so that AddRobots can be a community effort. The mkdocs system is a self-contained, Python-based documentation tool that uses Twitter Bootstrap and scripting to generate high-quality HTML-based documentation using simple markdown files. The cool thing about mkdocs is that the repo is both the documentation set and place to generate the static, production site. The top-level mkdocs.yml file shows the documentation tree structure and configurations. If you edit this file, it will be pretty easy to see what markdown (*.md) files you need to edit in order to change the docs you want changed. Installing Python and mkdocs. \u00b6 Please see the mkdocs website to see how to install Python and the mkdocs tools. It's pretty simple and easy to do this, but it's out-of-scope to explain that here. Editing the docs \u00b6 From a terminal session change to the top-level directory >cd ~/git/addrobots_docs >mkdocs serve Now from your browser go to the URL: http://127.0.0.1:8000 As you edit the markdown files, mkdocs automatically updates the website in realtime so that you can review your changes. Generating the Static Documentation Website \u00b6 Once you've completed all of your edits, you need to generate the static site (not committed to git because \"./site\" is in .gitignore). >cd ~/git/addrobots_docs >mkdocs build This will generate a static documentation site in the directory ~/git/addrobots_docs/site. You can validate the site by killing the \"mkdocs serve\" process and starting a simple Python=-based web server in that directory: >cd ~/git/addrobots_docs/site >python -m SimpleHTTPServer 8000 Now from your browser go to the URL: http://127.0.0.1:8000 Commit the Static Site to Github Project Pages (\"gh-pages\") \u00b6 >cd ~/git/addrobots_docs >mkdocs gh-deploy --clean This command will generate the static site and push it to the gh-pages branch so that it shows up as a searchable, shred website (on github). The url will be https://your_github_id.github.io/addrobots_docs/ .","title":"Contribute"},{"location":"about/contribute/#contribute","text":"AddRobots docs use mkdocs and committed it all to github. This setup not only generates nice-looking, searchable documentation, it makes it possible to share/fork it so that AddRobots can be a community effort. The mkdocs system is a self-contained, Python-based documentation tool that uses Twitter Bootstrap and scripting to generate high-quality HTML-based documentation using simple markdown files. The cool thing about mkdocs is that the repo is both the documentation set and place to generate the static, production site. The top-level mkdocs.yml file shows the documentation tree structure and configurations. If you edit this file, it will be pretty easy to see what markdown (*.md) files you need to edit in order to change the docs you want changed.","title":"Contribute"},{"location":"about/contribute/#installing-python-and-mkdocs","text":"Please see the mkdocs website to see how to install Python and the mkdocs tools. It's pretty simple and easy to do this, but it's out-of-scope to explain that here.","title":"Installing Python and mkdocs."},{"location":"about/contribute/#editing-the-docs","text":"From a terminal session change to the top-level directory >cd ~/git/addrobots_docs >mkdocs serve Now from your browser go to the URL: http://127.0.0.1:8000 As you edit the markdown files, mkdocs automatically updates the website in realtime so that you can review your changes.","title":"Editing the docs"},{"location":"about/contribute/#generating-the-static-documentation-website","text":"Once you've completed all of your edits, you need to generate the static site (not committed to git because \"./site\" is in .gitignore). >cd ~/git/addrobots_docs >mkdocs build This will generate a static documentation site in the directory ~/git/addrobots_docs/site. You can validate the site by killing the \"mkdocs serve\" process and starting a simple Python=-based web server in that directory: >cd ~/git/addrobots_docs/site >python -m SimpleHTTPServer 8000 Now from your browser go to the URL: http://127.0.0.1:8000","title":"Generating the Static Documentation Website"},{"location":"about/contribute/#commit-the-static-site-to-github-project-pages-gh-pages","text":">cd ~/git/addrobots_docs >mkdocs gh-deploy --clean This command will generate the static site and push it to the gh-pages branch so that it shows up as a searchable, shred website (on github). The url will be https://your_github_id.github.io/addrobots_docs/ .","title":"Commit the Static Site to Github Project Pages (\"gh-pages\")"},{"location":"about/license/","text":"BSD License \u00b6 Copyright \u00a9 2016, Jeff Williams All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"about/license/#bsd-license","text":"Copyright \u00a9 2016, Jeff Williams All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"BSD License"},{"location":"about/management/","text":"Project Management \u00b6 Issues \u00b6 Github project management allows us to collect issues from each repo into a central kanban management board here: https://github.com/orgs/AddRobots/projects/1 Enter issues into the appropriate repo and then place them onto the board as appropriate. Milestones \u00b6 Github project management cannot have it's own milestones, and it cannot track milestones from each repo. Instead, create milestones within each repo that apply to that repo only. This is not a problem since we run sprints separately on each repo. Sprints \u00b6 Jen DeWalt has an excellent guide for how to manage sprints from within Github. https://zube.io/blog/agile-project-management-workflow-for-github-issues/ . We mostly follow this process, except that there are many repos across the project, so each repo has its own sprint.","title":"Project Management"},{"location":"about/management/#project-management","text":"","title":"Project Management"},{"location":"about/management/#issues","text":"Github project management allows us to collect issues from each repo into a central kanban management board here: https://github.com/orgs/AddRobots/projects/1 Enter issues into the appropriate repo and then place them onto the board as appropriate.","title":"Issues"},{"location":"about/management/#milestones","text":"Github project management cannot have it's own milestones, and it cannot track milestones from each repo. Instead, create milestones within each repo that apply to that repo only. This is not a problem since we run sprints separately on each repo.","title":"Milestones"},{"location":"about/management/#sprints","text":"Jen DeWalt has an excellent guide for how to manage sprints from within Github. https://zube.io/blog/agile-project-management-workflow-for-github-issues/ . We mostly follow this process, except that there are many repos across the project, so each repo has its own sprint.","title":"Sprints"},{"location":"about/zerodiff/","text":"We follow the ZeroDiff process to develop the AddRobots. You can read more about it at: http://www.zerodiff.org","title":"ZeroDiff"},{"location":"android/overview/","text":"Android Application \u00b6 The standard Android application supplied by AddRobots lives in a public repo. https://github.com/AddRobots/addrobots_android . We made this repo public so that it's clear what's going on inside. It also provides the opportunity for the larger community to improve the application through fixes or features. We anticipate for the majority of robot tasks this application will service your needs since mainly it does a few things: Detect devices and register them with the cloud Shuttle commands and data to/from the motion control running in the cloud (Eventually) Update the firmware of devices connected to USB In the rare cases where you have a specialized task that requires a localized behavior the standard application does not provide, you can use this project as a starting point for your own effort. Application Build \u00b6 We build the application using Android Studio and we build every merge to the master branch at CircleCI. The build and publish process is beyond the scope of this documentation, though building from Android Studio is standard and straight-forward and the CI/CD build/test/publish process is mostly learnable from the CircleCI config file.","title":"Overview"},{"location":"android/overview/#android-application","text":"The standard Android application supplied by AddRobots lives in a public repo. https://github.com/AddRobots/addrobots_android . We made this repo public so that it's clear what's going on inside. It also provides the opportunity for the larger community to improve the application through fixes or features. We anticipate for the majority of robot tasks this application will service your needs since mainly it does a few things: Detect devices and register them with the cloud Shuttle commands and data to/from the motion control running in the cloud (Eventually) Update the firmware of devices connected to USB In the rare cases where you have a specialized task that requires a localized behavior the standard application does not provide, you can use this project as a starting point for your own effort.","title":"Android Application"},{"location":"android/overview/#application-build","text":"We build the application using Android Studio and we build every merge to the master branch at CircleCI. The build and publish process is beyond the scope of this documentation, though building from Android Studio is standard and straight-forward and the CI/CD build/test/publish process is mostly learnable from the CircleCI config file.","title":"Application Build"},{"location":"android/applications/cart/","text":"Robotic Cart Reference Application \u00b6 The project comes with a reference application that converts a wire cart or z-rack into autonomous, remote-drive vehicle. The cloud application encodes high-level, application-specific commands (e.g. \"drive\", \"stop\", \"orbit\", etc.) into protobuf messages that it sends to an Android application. The Android application is a fairly typical high-level vehicle control system with a PID loop fed by the phone's sensor array: camera/optical-flow, compass heading, acceleration/tilt and so on. The PID control code converts these high-level application commands into low-level motor commands that it sends to a central background service that gets them onto the USB bus. This Android application is meant only as as a fun project to get you familiar with how the stack works.","title":"Robotic Cart"},{"location":"android/applications/cart/#robotic-cart-reference-application","text":"The project comes with a reference application that converts a wire cart or z-rack into autonomous, remote-drive vehicle. The cloud application encodes high-level, application-specific commands (e.g. \"drive\", \"stop\", \"orbit\", etc.) into protobuf messages that it sends to an Android application. The Android application is a fairly typical high-level vehicle control system with a PID loop fed by the phone's sensor array: camera/optical-flow, compass heading, acceleration/tilt and so on. The PID control code converts these high-level application commands into low-level motor commands that it sends to a central background service that gets them onto the USB bus. This Android application is meant only as as a fun project to get you familiar with how the stack works.","title":"Robotic Cart Reference Application"},{"location":"android/applications/shim/","text":"Shim Application \u00b6 The shim application simply passes motor commands to/from Google Compute (Firebase) to the local motor with no local processing at all. These kinds of applications will not be able to take advantage of the local smartphone capabilities (cameras, IMU, GPS, touch-screen UX, etc), but for many simple control applications this may be perfectly suitable. A silly example is an Internet-controlled cat feeder.","title":"Shim Application"},{"location":"android/applications/shim/#shim-application","text":"The shim application simply passes motor commands to/from Google Compute (Firebase) to the local motor with no local processing at all. These kinds of applications will not be able to take advantage of the local smartphone capabilities (cameras, IMU, GPS, touch-screen UX, etc), but for many simple control applications this may be perfectly suitable. A silly example is an Internet-controlled cat feeder.","title":"Shim Application"},{"location":"architecture/processflows/","text":"High-Level Control \u00b6 Remote WebApp (ReactJS) to vehicle control \u00b6 Title: Remote Vehicle Control WebApp->GCM: VehicleCmd GCM->VCU: VehicleCmd VCU->Shim: MotorCmd Shim->MCU: MotorCmd MCU->Shim: MotorData Shim->VCU: MotorData VCU->Shim: MotorCmd (PID) Shim->MCU: MotorCmd (PID) Remote WebApp (ReactJS) to direct motor control \u00b6 Title: Remote Motor Control WebApp->GCM: MotorCmd GCM->Shim: MotorCmd Shim->MCU: MotorCmd MCU->Shim: MotorData Shim->GCM: MotorData GCM->WebApp: MotorData WebApp->GCM: MotorCmd (PID) GCM->Shim: MotorCmd (PID) Shim->MCU: MotorCmd (PID) Decode \u00b6 Code Description WebApp The ReactJS webapp running on a user's device GCM Google Cloud Messaging VCU The vehicle control programming that runs the local robot's android device Shim The motor command handler background process that runs on the local robot's android device MCU The physical motor controller tied to Android by USB3 Type-C","title":"Information Flow"},{"location":"architecture/processflows/#high-level-control","text":"","title":"High-Level Control"},{"location":"architecture/processflows/#remote-webapp-reactjs-to-vehicle-control","text":"Title: Remote Vehicle Control WebApp->GCM: VehicleCmd GCM->VCU: VehicleCmd VCU->Shim: MotorCmd Shim->MCU: MotorCmd MCU->Shim: MotorData Shim->VCU: MotorData VCU->Shim: MotorCmd (PID) Shim->MCU: MotorCmd (PID)","title":"Remote WebApp (ReactJS) to vehicle control"},{"location":"architecture/processflows/#remote-webapp-reactjs-to-direct-motor-control","text":"Title: Remote Motor Control WebApp->GCM: MotorCmd GCM->Shim: MotorCmd Shim->MCU: MotorCmd MCU->Shim: MotorData Shim->GCM: MotorData GCM->WebApp: MotorData WebApp->GCM: MotorCmd (PID) GCM->Shim: MotorCmd (PID) Shim->MCU: MotorCmd (PID)","title":"Remote WebApp (ReactJS) to direct motor control"},{"location":"architecture/processflows/#decode","text":"Code Description WebApp The ReactJS webapp running on a user's device GCM Google Cloud Messaging VCU The vehicle control programming that runs the local robot's android device Shim The motor command handler background process that runs on the local robot's android device MCU The physical motor controller tied to Android by USB3 Type-C","title":"Decode"},{"location":"messages/general/","text":"ProtoBuf Messages \u00b6 The system uses Google protocol buffers to encode all messages sent/received by the various subsystems. Vehicle Messages \u00b6 The top-level vehicle message contains one fields, a union field that contains either a Drive, Orbit or Halt command. The VehicleMsg.proto file contains the following definition for the top-level motor message: message VcuWrapper { oneof msg { Drive drive = 1; Orbit orbit = 2; Halt halt = 3; } } Motor Messages \u00b6 The top-level motor message contains two fields, a UUID to address the message to a particular motor followed by a union field that contains either a MotorCmd or MotorData. The MotorMsg.proto file contains the following definition for the top-level motor message: message McuWrapper { string uuid = 1; oneof content { MotorData motorData = 2; MotorCmd motorCmd = 3; } } UUID \u00b6 The motor's universally unique ID as a string. Identifying the motors by UUID means we do not need a central authority to mint new motors that are uniquely addressable. Any of the UUID encoding formats are fine as long as the stored value is the canonical string representation of 32 base16 digits in the form 8-4-4-4-12 for a total of 36 characters.","title":"General"},{"location":"messages/general/#protobuf-messages","text":"The system uses Google protocol buffers to encode all messages sent/received by the various subsystems.","title":"ProtoBuf Messages"},{"location":"messages/general/#vehicle-messages","text":"The top-level vehicle message contains one fields, a union field that contains either a Drive, Orbit or Halt command. The VehicleMsg.proto file contains the following definition for the top-level motor message: message VcuWrapper { oneof msg { Drive drive = 1; Orbit orbit = 2; Halt halt = 3; } }","title":"Vehicle Messages"},{"location":"messages/general/#motor-messages","text":"The top-level motor message contains two fields, a UUID to address the message to a particular motor followed by a union field that contains either a MotorCmd or MotorData. The MotorMsg.proto file contains the following definition for the top-level motor message: message McuWrapper { string uuid = 1; oneof content { MotorData motorData = 2; MotorCmd motorCmd = 3; } }","title":"Motor Messages"},{"location":"messages/general/#uuid","text":"The motor's universally unique ID as a string. Identifying the motors by UUID means we do not need a central authority to mint new motors that are uniquely addressable. Any of the UUID encoding formats are fine as long as the stored value is the canonical string representation of 32 base16 digits in the form 8-4-4-4-12 for a total of 36 characters.","title":"UUID"},{"location":"messages/motor/commands/motorcmd/","text":"MotorCmd \u00b6 A motor command message is a single action followed by one or more command parameters, each encoded as a tuple: (param id, value, unit). message MotorCmd { MotorAction action = 1; repeated CmdParam paramList = 2; } MotorAction \u00b6 BRAKE \u00b6 Stop the motor immediately where it is and apply holding torque. FREEWHEEL \u00b6 Release all of the windings so that the motor spinds freely. RUN \u00b6 Run the motor continuously. GOTO_POS \u00b6 Go to requested position, stop and apply holding torque. CmdParam: \u00b6 The motor command parameters are sent as a list of tuples: (ID, value, unit). The ID and unit come from an enumerated set and the value is string-encoded. The following is a list of command parameter IDs - we include the unit for clarity. The default value and unit are in paranthesis. CLOCKWISE \u00b6 The motor movement direction (true, BOOLEAN) POSITION \u00b6 The motor stop position (0.0, DEGREE) VELOCITY \u00b6 The motor velocity once fully accelerated (360.0, DEGREE/SEC) ACCEL \u00b6 The motor acceleration from the current velocity toward the target velocity (15 DEGREE/SEC^2) HOLD_TORQUE \u00b6 The amount of torque to apply in an attempt to hold the requested position for the commands GOTO_POS or BRAKE. (2.0, Newton) BREAKAWAY \u00b6 If the motor fails to hold a position, maintain a velocity or accelerate for this much time, it will freewheel. When set to 0 there is no breakaway behavior (0, SEC) Warning NB: THIS IN NO WAY ASSURES A HUMAN-SAFE OPERATION - ALL HUMAN SAFETY SYSTEMS MUST BE EXTERNAL TO MOTOR CONTROL. MIN_CURRENT_LIMIT \u00b6 The minimum current the motor should try to maintain for the active operation. During the active operation, the controller will continuously detect the minimum current required to successfully complete the operation, but it will never go below the MIN_CURRENT_LIMIT. (0.0, AMP) MAX_CURRENT_LIMIT \u00b6 The maximum current the motor is allowed to draw for the active operation. During the active operation, the controller will continuously detect the minimum current required to successfully complete the operation, but it will never go above the MAX_CURRENT_LIMIT. When coupled with BREAKAWAY, this is a good way to create a safe-operation envelope. (0.5 AMP) Warning NB: THIS IN NO WAY ASSURES A HUMAN-SAFE OPERATION - ALL HUMAN SAFETY SYSTEMS MUST BE EXTERNAL TO MOTOR CONTROL. MIN_VOLT_VELOCITY \u00b6 Apply the MIN_VOLT_LIMIT when the velocity is at or below this value. The controller uses a voltage slope from MIN_VOLT_LIMIT to MAX_VOLT_LIMIT when velocity is between MIN_VOLT_VELOCITY and MAX_VOLT_VELOCITY (180, DEGREE/SEC) MAX_VOLT_VELOCITY \u00b6 Apply the MAX_VOLT_LIMIT when the velocity is at or above this value. The controller uses a voltage slope from MIN_VOLT_LIMIT to MAX_VOLT_LIMIT when velocity is between MIN_VOLT_VELOCITY and MAX_VOLT_VELOCITY (360, DEGREE/SEC) MIN_VOLT_LIMIT \u00b6 The voltage to apply when the velocity is at or below MIN_VOLT_VELOCITY. (3, VOLT) MAX_VOLT_LIMIT \u00b6 The voltage to apply when the velocity is at or above MAX_VOLT_VELOCITY. (24, VOLT) Units \u00b6 STRING \u00b6 INTEGER \u00b6 DOUBLE \u00b6 SECOND \u00b6 DEGREE \u00b6 AMP \u00b6 VOLT \u00b6 NEWTONS \u00b6 UHENRY \u00b6 Sample Commands \u00b6 An simple motor positioning command might be: GOTO_POS (POSITION, 180.5, DEGREES) (DIRECTION, TRUE, CLOCKWISE) This would command the motor to turn clockwise until it reached 180.5deg, and it would hold that position with the default torque. If you need more control of the motor's behavior during that GOTO_POS command, you can add more parameters: GOTO_POS (POSITION, 180.5, DEGREES) (DIRECTION, TRUE, CLOCKWISE) (ACCEL, 0.5, DEGREE/SEC) (MIN_CURRENT_LIMIT, 0.2, AMP) (MAX_CURRENT_LIMIT, 2, AMP) This would command the motor to turn clockwise, accelerating at 0.5deg/sec with a minimum current of 0.2 amps and a maximum current of 2 amps until the motor reached 180.75 deg and then hold that position by seeking the minimum required current needed to hold the position without going below or above the current limits. The point is that you can use the motors simply, or with more control - both work.","title":"MotorCmd"},{"location":"messages/motor/commands/motorcmd/#motorcmd","text":"A motor command message is a single action followed by one or more command parameters, each encoded as a tuple: (param id, value, unit). message MotorCmd { MotorAction action = 1; repeated CmdParam paramList = 2; }","title":"MotorCmd"},{"location":"messages/motor/commands/motorcmd/#motoraction","text":"","title":"MotorAction"},{"location":"messages/motor/commands/motorcmd/#brake","text":"Stop the motor immediately where it is and apply holding torque.","title":"BRAKE"},{"location":"messages/motor/commands/motorcmd/#freewheel","text":"Release all of the windings so that the motor spinds freely.","title":"FREEWHEEL"},{"location":"messages/motor/commands/motorcmd/#run","text":"Run the motor continuously.","title":"RUN"},{"location":"messages/motor/commands/motorcmd/#goto_pos","text":"Go to requested position, stop and apply holding torque.","title":"GOTO_POS"},{"location":"messages/motor/commands/motorcmd/#cmdparam","text":"The motor command parameters are sent as a list of tuples: (ID, value, unit). The ID and unit come from an enumerated set and the value is string-encoded. The following is a list of command parameter IDs - we include the unit for clarity. The default value and unit are in paranthesis.","title":"CmdParam:"},{"location":"messages/motor/commands/motorcmd/#clockwise","text":"The motor movement direction (true, BOOLEAN)","title":"CLOCKWISE"},{"location":"messages/motor/commands/motorcmd/#position","text":"The motor stop position (0.0, DEGREE)","title":"POSITION"},{"location":"messages/motor/commands/motorcmd/#velocity","text":"The motor velocity once fully accelerated (360.0, DEGREE/SEC)","title":"VELOCITY"},{"location":"messages/motor/commands/motorcmd/#accel","text":"The motor acceleration from the current velocity toward the target velocity (15 DEGREE/SEC^2)","title":"ACCEL"},{"location":"messages/motor/commands/motorcmd/#hold_torque","text":"The amount of torque to apply in an attempt to hold the requested position for the commands GOTO_POS or BRAKE. (2.0, Newton)","title":"HOLD_TORQUE"},{"location":"messages/motor/commands/motorcmd/#breakaway","text":"If the motor fails to hold a position, maintain a velocity or accelerate for this much time, it will freewheel. When set to 0 there is no breakaway behavior (0, SEC) Warning NB: THIS IN NO WAY ASSURES A HUMAN-SAFE OPERATION - ALL HUMAN SAFETY SYSTEMS MUST BE EXTERNAL TO MOTOR CONTROL.","title":"BREAKAWAY"},{"location":"messages/motor/commands/motorcmd/#min_current_limit","text":"The minimum current the motor should try to maintain for the active operation. During the active operation, the controller will continuously detect the minimum current required to successfully complete the operation, but it will never go below the MIN_CURRENT_LIMIT. (0.0, AMP)","title":"MIN_CURRENT_LIMIT"},{"location":"messages/motor/commands/motorcmd/#max_current_limit","text":"The maximum current the motor is allowed to draw for the active operation. During the active operation, the controller will continuously detect the minimum current required to successfully complete the operation, but it will never go above the MAX_CURRENT_LIMIT. When coupled with BREAKAWAY, this is a good way to create a safe-operation envelope. (0.5 AMP) Warning NB: THIS IN NO WAY ASSURES A HUMAN-SAFE OPERATION - ALL HUMAN SAFETY SYSTEMS MUST BE EXTERNAL TO MOTOR CONTROL.","title":"MAX_CURRENT_LIMIT"},{"location":"messages/motor/commands/motorcmd/#min_volt_velocity","text":"Apply the MIN_VOLT_LIMIT when the velocity is at or below this value. The controller uses a voltage slope from MIN_VOLT_LIMIT to MAX_VOLT_LIMIT when velocity is between MIN_VOLT_VELOCITY and MAX_VOLT_VELOCITY (180, DEGREE/SEC)","title":"MIN_VOLT_VELOCITY"},{"location":"messages/motor/commands/motorcmd/#max_volt_velocity","text":"Apply the MAX_VOLT_LIMIT when the velocity is at or above this value. The controller uses a voltage slope from MIN_VOLT_LIMIT to MAX_VOLT_LIMIT when velocity is between MIN_VOLT_VELOCITY and MAX_VOLT_VELOCITY (360, DEGREE/SEC)","title":"MAX_VOLT_VELOCITY"},{"location":"messages/motor/commands/motorcmd/#min_volt_limit","text":"The voltage to apply when the velocity is at or below MIN_VOLT_VELOCITY. (3, VOLT)","title":"MIN_VOLT_LIMIT"},{"location":"messages/motor/commands/motorcmd/#max_volt_limit","text":"The voltage to apply when the velocity is at or above MAX_VOLT_VELOCITY. (24, VOLT)","title":"MAX_VOLT_LIMIT"},{"location":"messages/motor/commands/motorcmd/#units","text":"","title":"Units"},{"location":"messages/motor/commands/motorcmd/#string","text":"","title":"STRING"},{"location":"messages/motor/commands/motorcmd/#integer","text":"","title":"INTEGER"},{"location":"messages/motor/commands/motorcmd/#double","text":"","title":"DOUBLE"},{"location":"messages/motor/commands/motorcmd/#second","text":"","title":"SECOND"},{"location":"messages/motor/commands/motorcmd/#degree","text":"","title":"DEGREE"},{"location":"messages/motor/commands/motorcmd/#amp","text":"","title":"AMP"},{"location":"messages/motor/commands/motorcmd/#volt","text":"","title":"VOLT"},{"location":"messages/motor/commands/motorcmd/#newtons","text":"","title":"NEWTONS"},{"location":"messages/motor/commands/motorcmd/#uhenry","text":"","title":"UHENRY"},{"location":"messages/motor/commands/motorcmd/#sample-commands","text":"An simple motor positioning command might be: GOTO_POS (POSITION, 180.5, DEGREES) (DIRECTION, TRUE, CLOCKWISE) This would command the motor to turn clockwise until it reached 180.5deg, and it would hold that position with the default torque. If you need more control of the motor's behavior during that GOTO_POS command, you can add more parameters: GOTO_POS (POSITION, 180.5, DEGREES) (DIRECTION, TRUE, CLOCKWISE) (ACCEL, 0.5, DEGREE/SEC) (MIN_CURRENT_LIMIT, 0.2, AMP) (MAX_CURRENT_LIMIT, 2, AMP) This would command the motor to turn clockwise, accelerating at 0.5deg/sec with a minimum current of 0.2 amps and a maximum current of 2 amps until the motor reached 180.75 deg and then hold that position by seeking the minimum required current needed to hold the position without going below or above the current limits. The point is that you can use the motors simply, or with more control - both work.","title":"Sample Commands"},{"location":"messages/motor/data/motordata/","text":"MotorData \u00b6 A motor data message is a single action followed by one or more command parameters, each encoded as a tuple: (param id, value, unit). message MotorData { DataAction action = 1; repeated DataParam paramList = 2; } DataAction \u00b6 GET \u00b6 The MotorData message that requests the motor send to send back a MotorData message that contains values for each requested parameter. RESULT \u00b6 The MotorData message that contains one or more motor data values. DataParam \u00b6 VERSION \u00b6 Motor version number. The manufacturer controls this value, and it has no meaning with motor control. (The system uses protocol buffers in a backward compatibly way, so versioning should not be necessary.) MFG_DATE \u00b6 The manufacturing date encoded as YYYYMMDD. The manufacturer controls this value, and it has no meaning with motor control. MFG_ID \u00b6 The manufacturer's ID. The manufacturer controls this value, and it has no meaning with motor control. MODEL_ID \u00b6 The motor's model ID. The manufacturer controls this value, and it has no meaning with motor control. INDUCTANCE \u00b6 The motor's inductance in Henries. This allows the control program to estimate total torque under different voltages and currents. POSITION \u00b6 The motor's current position in degrees. CURRENT \u00b6 The instantaneously measured current supplied to the motor windings. VOLTAGE \u00b6 The instantaneously measured voltage supplied to the motor windings.","title":"MotorData"},{"location":"messages/motor/data/motordata/#motordata","text":"A motor data message is a single action followed by one or more command parameters, each encoded as a tuple: (param id, value, unit). message MotorData { DataAction action = 1; repeated DataParam paramList = 2; }","title":"MotorData"},{"location":"messages/motor/data/motordata/#dataaction","text":"","title":"DataAction"},{"location":"messages/motor/data/motordata/#get","text":"The MotorData message that requests the motor send to send back a MotorData message that contains values for each requested parameter.","title":"GET"},{"location":"messages/motor/data/motordata/#result","text":"The MotorData message that contains one or more motor data values.","title":"RESULT"},{"location":"messages/motor/data/motordata/#dataparam","text":"","title":"DataParam"},{"location":"messages/motor/data/motordata/#version","text":"Motor version number. The manufacturer controls this value, and it has no meaning with motor control. (The system uses protocol buffers in a backward compatibly way, so versioning should not be necessary.)","title":"VERSION"},{"location":"messages/motor/data/motordata/#mfg_date","text":"The manufacturing date encoded as YYYYMMDD. The manufacturer controls this value, and it has no meaning with motor control.","title":"MFG_DATE"},{"location":"messages/motor/data/motordata/#mfg_id","text":"The manufacturer's ID. The manufacturer controls this value, and it has no meaning with motor control.","title":"MFG_ID"},{"location":"messages/motor/data/motordata/#model_id","text":"The motor's model ID. The manufacturer controls this value, and it has no meaning with motor control.","title":"MODEL_ID"},{"location":"messages/motor/data/motordata/#inductance","text":"The motor's inductance in Henries. This allows the control program to estimate total torque under different voltages and currents.","title":"INDUCTANCE"},{"location":"messages/motor/data/motordata/#position","text":"The motor's current position in degrees.","title":"POSITION"},{"location":"messages/motor/data/motordata/#current","text":"The instantaneously measured current supplied to the motor windings.","title":"CURRENT"},{"location":"messages/motor/data/motordata/#voltage","text":"The instantaneously measured voltage supplied to the motor windings.","title":"VOLTAGE"},{"location":"messages/vehicle/application/cartcmds/","text":"High-Level Vehicle Drive Commands \u00b6","title":"Robotic Cart"},{"location":"messages/vehicle/application/cartcmds/#high-level-vehicle-drive-commands","text":"","title":"High-Level Vehicle Drive Commands"},{"location":"messages/vehicle/commands/vehiclecmds/","text":"Drive \u00b6 A drive command message is a single action followed by six parameters. message Drive { double velocity = 1; string direction = 2; double acceleration = 3; double distance = 4; double edgeDistance = 5; string edgeSide = 6; } velocity \u00b6 The velocity in meters per second direction \u00b6 FORWARD, BACKWARD acceleration \u00b6 The acceleration in m/s^2 distance \u00b6 The distance to travel in meters edgeDistance \u00b6 The distance to maintain from a side of the vehicle edgeSide \u00b6 PORT, STARBOARD Orbit \u00b6 A drive command message is a single action followed by six parameters. message Orbit { double velocity = 1; string direction = 2; double acceleration = 3; double degrees = 4; } velocity \u00b6 The velocity in meters per second direction \u00b6 CLOCKWISE, COUTNERCLOCKWISE acceleration \u00b6 The acceleration in m/s^2 degress \u00b6 The degrees to turn in direction Halt \u00b6 A drive command message is a single action followed by six parameters. message Halt { double acceleration = 1; } acceleration \u00b6 The acceleration in m/s^2 (0 == instant acceleration)","title":"VcuCmd"},{"location":"messages/vehicle/commands/vehiclecmds/#drive","text":"A drive command message is a single action followed by six parameters. message Drive { double velocity = 1; string direction = 2; double acceleration = 3; double distance = 4; double edgeDistance = 5; string edgeSide = 6; }","title":"Drive"},{"location":"messages/vehicle/commands/vehiclecmds/#velocity","text":"The velocity in meters per second","title":"velocity"},{"location":"messages/vehicle/commands/vehiclecmds/#direction","text":"FORWARD, BACKWARD","title":"direction"},{"location":"messages/vehicle/commands/vehiclecmds/#acceleration","text":"The acceleration in m/s^2","title":"acceleration"},{"location":"messages/vehicle/commands/vehiclecmds/#distance","text":"The distance to travel in meters","title":"distance"},{"location":"messages/vehicle/commands/vehiclecmds/#edgedistance","text":"The distance to maintain from a side of the vehicle","title":"edgeDistance"},{"location":"messages/vehicle/commands/vehiclecmds/#edgeside","text":"PORT, STARBOARD","title":"edgeSide"},{"location":"messages/vehicle/commands/vehiclecmds/#orbit","text":"A drive command message is a single action followed by six parameters. message Orbit { double velocity = 1; string direction = 2; double acceleration = 3; double degrees = 4; }","title":"Orbit"},{"location":"messages/vehicle/commands/vehiclecmds/#velocity_1","text":"The velocity in meters per second","title":"velocity"},{"location":"messages/vehicle/commands/vehiclecmds/#direction_1","text":"CLOCKWISE, COUTNERCLOCKWISE","title":"direction"},{"location":"messages/vehicle/commands/vehiclecmds/#acceleration_1","text":"The acceleration in m/s^2","title":"acceleration"},{"location":"messages/vehicle/commands/vehiclecmds/#degress","text":"The degrees to turn in direction","title":"degress"},{"location":"messages/vehicle/commands/vehiclecmds/#halt","text":"A drive command message is a single action followed by six parameters. message Halt { double acceleration = 1; }","title":"Halt"},{"location":"messages/vehicle/commands/vehiclecmds/#acceleration_2","text":"The acceleration in m/s^2 (0 == instant acceleration)","title":"acceleration"},{"location":"repos/addrobots_mcu/","text":"AddRobots MCU \u00b6 Build Instructions \u00b6 The project is a Kinetis Design Studio 3.x project (KDS 3.2.0) https://community.nxp.com/docs/DOC-330211 It takes advantage of the following projects: GNUARM Eclipse OpenOCD https://gnuarmeclipse.github.io/ MCU on Eclipse Processor Expert beans https://mcuoneclipse.com/category/processor-expert/ Install the tools from these projects into KDS, and then open the project. Then select Generate Processor Expert Code and that will generate code from the Process Expoert Beans. The project is likely in Build Automatically mode which means the project will build all the code. If it's not, then select Build Project . There will be a debug/run configuration called addrobots_mcu (OpenOCD KL22F) (release) that should run the code. It's a CMSIS/DAP program/run setup, so if there's compatible device on the USB bus, the IDE will program it and then run/debug the code. Project Improvements & Goals \u00b6 NXP bought Freescale in 2016, and they soon deprecated KDS. They replaced it with a new IDE, MCU Xpresso that's not quite ready for a port of this project. It may be possible to bring Processor Expert into an Eclipse Neon version of MCU Xpresso: https://mcuoneclipse.com/2017/04/09/mcuxpresso-ide-installing-processor-expert-into-eclipse-neon/","title":"MCU"},{"location":"repos/addrobots_mcu/#addrobots-mcu","text":"","title":"AddRobots MCU"},{"location":"repos/addrobots_mcu/#build-instructions","text":"The project is a Kinetis Design Studio 3.x project (KDS 3.2.0) https://community.nxp.com/docs/DOC-330211 It takes advantage of the following projects: GNUARM Eclipse OpenOCD https://gnuarmeclipse.github.io/ MCU on Eclipse Processor Expert beans https://mcuoneclipse.com/category/processor-expert/ Install the tools from these projects into KDS, and then open the project. Then select Generate Processor Expert Code and that will generate code from the Process Expoert Beans. The project is likely in Build Automatically mode which means the project will build all the code. If it's not, then select Build Project . There will be a debug/run configuration called addrobots_mcu (OpenOCD KL22F) (release) that should run the code. It's a CMSIS/DAP program/run setup, so if there's compatible device on the USB bus, the IDE will program it and then run/debug the code.","title":"Build Instructions"},{"location":"repos/addrobots_mcu/#project-improvements-goals","text":"NXP bought Freescale in 2016, and they soon deprecated KDS. They replaced it with a new IDE, MCU Xpresso that's not quite ready for a port of this project. It may be possible to bring Processor Expert into an Eclipse Neon version of MCU Xpresso: https://mcuoneclipse.com/2017/04/09/mcuxpresso-ide-installing-processor-expert-into-eclipse-neon/","title":"Project Improvements &amp; Goals"},{"location":"repos/addrobots_proto/","text":"AddRobots Protocol Buffers \u00b6 Message Processing \u00b6 The addrobots_proto repo contains the protocol buffer message definitions. We process the raw proto files into code using the protoc command. Code Generation We generate and commit the message source code to the repo, so you usually don't need to do this unless you're changing the message prototype files. Build script \u00b6 There is a build script that runs all of the below message code generation. You can still do this by-hand using the sections below this one, or you can run the command: > cd ~/git/addrobots_proto/ > ./build.sh This will generate all of the message source code and copy it into the right places. Protoc \u00b6 The protoc command comes from the Google github repo: https://github.com/google/protobuf . How you build and install protoc is dependent on you. The commands below are correct for protoc v3.3.1. NanoPB (protoc for embedded) \u00b6 In order to generate embedded C message code below, we need to use the NanoPB project: https://github.com/nanopb/nanopb . Once you check out this repo, execute the following commands to generate the distribution version: > cd ~/git/nanopb > ./tools/make_XXX_package.sh (where XXX is [linux, mac or windows]) This will create a release directory in the NanoPB project's dist folder. Use the path to the created sub-folder in the commands below. Generate source code \u00b6 Java/Kotlin message generation \u00b6 > cd ~/git/addrobots_proto/ > protoc --proto_path=./SourceMessages/ --java_out=./Production/Java/ ./SourceMessages/VehicleMsg.proto > protoc --proto_path=./SourceMessages/ --java_out=./Production/Java/ ./SourceMessages/MotorMsg.proto Javascript message generation \u00b6 > cd ~/git/addrobots_proto/ > protoc --proto_path=./SourceMessages/ --js_out=import_style=commonjs,binary:./Production/Javascript/ ./SourceMessages/VehicleMsg.proto > protoc --proto_path=./SourceMessages/ --js_out=import_style=commonjs,binary:./Production/Javascript/ ./SourceMessages/MotorMsg.proto Python message generation \u00b6 > cd ~/git/addrobots_proto/ > protoc --proto_path=./SourceMessages/ --python_out=./Production/Python/ ./SourceMessages/VehicleMsg.proto > protoc --proto_path=./SourceMessages/ --python_out=./Production/Python/ ./SourceMessages/MotorMsg.proto Embedded C message generation \u00b6 > cd ~/git/addrobots_proto/Production > protoc --plugin=nanopb=~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/protoc-gen-nanopb --include_imports=~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/proto/nanopb.proto --proto_path=../SourceMessages -o./MotorMsg.pb ../SourceMessages/MotorMsg.proto > python ~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/nanopb_generator.py -f ../SourceMessages/MotorMsg.options --output-dir=../Production/NanoPB MotorMsg.pb NanoPB Dist Folder Version The reason for using the version in the dist folder is because we generated them using protoc v3.3.2 (locally) to support the proto3 keyword in nanopb. At the moment (25JUL17) the NanoPB project does not support the proto3 keyword in the default release code.","title":"ProtoBuf"},{"location":"repos/addrobots_proto/#addrobots-protocol-buffers","text":"","title":"AddRobots Protocol Buffers"},{"location":"repos/addrobots_proto/#message-processing","text":"The addrobots_proto repo contains the protocol buffer message definitions. We process the raw proto files into code using the protoc command. Code Generation We generate and commit the message source code to the repo, so you usually don't need to do this unless you're changing the message prototype files.","title":"Message Processing"},{"location":"repos/addrobots_proto/#build-script","text":"There is a build script that runs all of the below message code generation. You can still do this by-hand using the sections below this one, or you can run the command: > cd ~/git/addrobots_proto/ > ./build.sh This will generate all of the message source code and copy it into the right places.","title":"Build script"},{"location":"repos/addrobots_proto/#protoc","text":"The protoc command comes from the Google github repo: https://github.com/google/protobuf . How you build and install protoc is dependent on you. The commands below are correct for protoc v3.3.1.","title":"Protoc"},{"location":"repos/addrobots_proto/#nanopb-protoc-for-embedded","text":"In order to generate embedded C message code below, we need to use the NanoPB project: https://github.com/nanopb/nanopb . Once you check out this repo, execute the following commands to generate the distribution version: > cd ~/git/nanopb > ./tools/make_XXX_package.sh (where XXX is [linux, mac or windows]) This will create a release directory in the NanoPB project's dist folder. Use the path to the created sub-folder in the commands below.","title":"NanoPB (protoc for embedded)"},{"location":"repos/addrobots_proto/#generate-source-code","text":"","title":"Generate source code"},{"location":"repos/addrobots_proto/#javakotlin-message-generation","text":"> cd ~/git/addrobots_proto/ > protoc --proto_path=./SourceMessages/ --java_out=./Production/Java/ ./SourceMessages/VehicleMsg.proto > protoc --proto_path=./SourceMessages/ --java_out=./Production/Java/ ./SourceMessages/MotorMsg.proto","title":"Java/Kotlin message generation"},{"location":"repos/addrobots_proto/#javascript-message-generation","text":"> cd ~/git/addrobots_proto/ > protoc --proto_path=./SourceMessages/ --js_out=import_style=commonjs,binary:./Production/Javascript/ ./SourceMessages/VehicleMsg.proto > protoc --proto_path=./SourceMessages/ --js_out=import_style=commonjs,binary:./Production/Javascript/ ./SourceMessages/MotorMsg.proto","title":"Javascript message generation"},{"location":"repos/addrobots_proto/#python-message-generation","text":"> cd ~/git/addrobots_proto/ > protoc --proto_path=./SourceMessages/ --python_out=./Production/Python/ ./SourceMessages/VehicleMsg.proto > protoc --proto_path=./SourceMessages/ --python_out=./Production/Python/ ./SourceMessages/MotorMsg.proto","title":"Python message generation"},{"location":"repos/addrobots_proto/#embedded-c-message-generation","text":"> cd ~/git/addrobots_proto/Production > protoc --plugin=nanopb=~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/protoc-gen-nanopb --include_imports=~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/proto/nanopb.proto --proto_path=../SourceMessages -o./MotorMsg.pb ../SourceMessages/MotorMsg.proto > python ~/git/nanopb/dist/nanopb-0.3.8-28-g14efb1a-macosx-x86/generator/nanopb_generator.py -f ../SourceMessages/MotorMsg.options --output-dir=../Production/NanoPB MotorMsg.pb NanoPB Dist Folder Version The reason for using the version in the dist folder is because we generated them using protoc v3.3.2 (locally) to support the proto3 keyword in nanopb. At the moment (25JUL17) the NanoPB project does not support the proto3 keyword in the default release code.","title":"Embedded C message generation"},{"location":"repos/addrobots_vcu/","text":"AddRobots VCU \u00b6 Build Instructions \u00b6 This is a pretty much a standard Android Studio project with two modules: app and openCVLibrary . The project requires Android Studio's NDK native plugin, so you will need to use Android Studio 2.2+ and install the NDK libraries from the Android Studio SDK Manager. OpenCV \u00b6 We started the project with the OpenCV module into an Android project: OpenCV4Android , but then heavily modified it to fully build the core OpenCV C/C++ library entirely within Android Studio. OpenCV4Android is in java and it requires OpenCV shared libraries for the relevant target CPU platform. Normally, you'd have to build these libraries separately and add them to the project. This project now builds these libraries directly from the OpenCV code during the normal Gradle build. This means, as long as the OpenCV main code is in a directory that's peered to this project, it will build these libraries using CMake and NDK directly from within the Android Studio project build with no manual intervention. (Tho' it takes a long time to build these libraries!) Whatever version of OpenCV you have in the peer directory, Android Studio will build it for you. (We've built 3.1.0, 3.2.0 and 3.3.0 and anticipate it will be easy to continue to upgrade OpenCV at any time.) The way to organize this is: AndroidStudioProjects opencv <-- opencv 3.3.0 main project directly from github addrobots_vcu <-- directly from the github repo Gradle in Android Studio can't deal with absolute paths, so you really need a structure like this one above, where the OpenCV main C/C++ source project is relative to the VCU project. cmake \u00b6 The build from Android Studio will invoke a setup file android.toolchain.cmake , but this file is not correct to build OpenCV! There is a modified version of this file in the openCVLibrary submodule. Unfortunately, this file requires some knowledge of where it's installed, and for this reason, if you haven't used the directory structure from above, it will not be correct. The standard android.toolchain.cmake is sooo close, but it's not quite there yet (Google has been improving it a lot, and now it's just a handful of changes to make it work - hopefull they can make it work 100% with the standard file they ship with Android Studio NDK/CMake.) Build Organization Improvements/Goals \u00b6 Get Gradle Plugin/RuleSource to accept absolute paths, so that we can put the FFmpeg (and later OpenCV) repos whenever we want. (e.g. ~/git). Use NDK to also natively build OpenCV from the raw git repo so that we can debug the sources. Generalize the AutotoolsPlugin class so that it works with any autotools-based project. Clean-up various messes. It's hard to know best practices in this part of Gradle and with the Android plugin since it's still somewhat new.","title":"VCU"},{"location":"repos/addrobots_vcu/#addrobots-vcu","text":"","title":"AddRobots VCU"},{"location":"repos/addrobots_vcu/#build-instructions","text":"This is a pretty much a standard Android Studio project with two modules: app and openCVLibrary . The project requires Android Studio's NDK native plugin, so you will need to use Android Studio 2.2+ and install the NDK libraries from the Android Studio SDK Manager.","title":"Build Instructions"},{"location":"repos/addrobots_vcu/#opencv","text":"We started the project with the OpenCV module into an Android project: OpenCV4Android , but then heavily modified it to fully build the core OpenCV C/C++ library entirely within Android Studio. OpenCV4Android is in java and it requires OpenCV shared libraries for the relevant target CPU platform. Normally, you'd have to build these libraries separately and add them to the project. This project now builds these libraries directly from the OpenCV code during the normal Gradle build. This means, as long as the OpenCV main code is in a directory that's peered to this project, it will build these libraries using CMake and NDK directly from within the Android Studio project build with no manual intervention. (Tho' it takes a long time to build these libraries!) Whatever version of OpenCV you have in the peer directory, Android Studio will build it for you. (We've built 3.1.0, 3.2.0 and 3.3.0 and anticipate it will be easy to continue to upgrade OpenCV at any time.) The way to organize this is: AndroidStudioProjects opencv <-- opencv 3.3.0 main project directly from github addrobots_vcu <-- directly from the github repo Gradle in Android Studio can't deal with absolute paths, so you really need a structure like this one above, where the OpenCV main C/C++ source project is relative to the VCU project.","title":"OpenCV"},{"location":"repos/addrobots_vcu/#cmake","text":"The build from Android Studio will invoke a setup file android.toolchain.cmake , but this file is not correct to build OpenCV! There is a modified version of this file in the openCVLibrary submodule. Unfortunately, this file requires some knowledge of where it's installed, and for this reason, if you haven't used the directory structure from above, it will not be correct. The standard android.toolchain.cmake is sooo close, but it's not quite there yet (Google has been improving it a lot, and now it's just a handful of changes to make it work - hopefull they can make it work 100% with the standard file they ship with Android Studio NDK/CMake.)","title":"cmake"},{"location":"repos/addrobots_vcu/#build-organization-improvementsgoals","text":"Get Gradle Plugin/RuleSource to accept absolute paths, so that we can put the FFmpeg (and later OpenCV) repos whenever we want. (e.g. ~/git). Use NDK to also natively build OpenCV from the raw git repo so that we can debug the sources. Generalize the AutotoolsPlugin class so that it works with any autotools-based project. Clean-up various messes. It's hard to know best practices in this part of Gradle and with the Android plugin since it's still somewhat new.","title":"Build Organization Improvements/Goals"},{"location":"repos/repos/","text":"The Project Repos \u00b6 addrobots_proto \u00b6 https://github.com/AddRobots/addrobots_proto The core protocol buffer message definitions. it also includes the top-level project documentation. (For convenience, this project also includes the high-level commands, encoded as protocol buffers, for the reference application.) addrobots_webconsole \u00b6 https://github.com/AddRobots/addrobots_webconsole A Firebase + ReactJS webapp that acts as a vehicle control console for the reference application. addrobots_service \u00b6 https://github.com/AddRobots/addrobots_service An Android background service that tracks and controls the motors over the USB bus. It provides a simple message-passing API so that any high-level application (that has permission) can control the motors. addrobots_vcu \u00b6 https://github.com/AddRobots/addrobots_vcu The android \"vehicle control unit\" reference application that combines drive logic with a PID loop that uses local sensor data, such as OpenCV, Firebase messaging, addrobots_service, and the local IMU. addrobots_mcu \u00b6 https://github.com/AddRobots/addrobots_mcu An ARM CortexM4 based motor controller firmware that encodes/decodes the USB commands, drives the motor controller ICs, controls the PMIC, and collects/sends any sensor data (rotary encoder, PMIC values, etc). addrobots_pcb \u00b6 https://github.com/AddRobots/addrobots_pcb The PCB designs for the motor control boards that physically attach to the motor.","title":"Overview"},{"location":"repos/repos/#the-project-repos","text":"","title":"The Project Repos"},{"location":"repos/repos/#addrobots_proto","text":"https://github.com/AddRobots/addrobots_proto The core protocol buffer message definitions. it also includes the top-level project documentation. (For convenience, this project also includes the high-level commands, encoded as protocol buffers, for the reference application.)","title":"addrobots_proto"},{"location":"repos/repos/#addrobots_webconsole","text":"https://github.com/AddRobots/addrobots_webconsole A Firebase + ReactJS webapp that acts as a vehicle control console for the reference application.","title":"addrobots_webconsole"},{"location":"repos/repos/#addrobots_service","text":"https://github.com/AddRobots/addrobots_service An Android background service that tracks and controls the motors over the USB bus. It provides a simple message-passing API so that any high-level application (that has permission) can control the motors.","title":"addrobots_service"},{"location":"repos/repos/#addrobots_vcu","text":"https://github.com/AddRobots/addrobots_vcu The android \"vehicle control unit\" reference application that combines drive logic with a PID loop that uses local sensor data, such as OpenCV, Firebase messaging, addrobots_service, and the local IMU.","title":"addrobots_vcu"},{"location":"repos/repos/#addrobots_mcu","text":"https://github.com/AddRobots/addrobots_mcu An ARM CortexM4 based motor controller firmware that encodes/decodes the USB commands, drives the motor controller ICs, controls the PMIC, and collects/sends any sensor data (rotary encoder, PMIC values, etc).","title":"addrobots_mcu"},{"location":"repos/repos/#addrobots_pcb","text":"https://github.com/AddRobots/addrobots_pcb The PCB designs for the motor control boards that physically attach to the motor.","title":"addrobots_pcb"}]}